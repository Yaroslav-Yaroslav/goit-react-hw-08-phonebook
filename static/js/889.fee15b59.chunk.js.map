{"version":3,"file":"static/js/889.fee15b59.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { Form as FormikForm, ErrorMessage as FormikErrorMessage } from 'formik';\nimport styled from 'styled-components';\n\nexport const Form = styled(FormikForm)`\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\nexport const ErrorMessage = styled(FormikErrorMessage)`\n  font-size: 14px;\n  color: ${p => p.theme.colors.error};\n`;\nexport const FormField = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n`;\nexport const Button = styled.button`\n  cursor: pointer;\n  padding: 5px;\n  margin-bottom: 20px;\n`;\n","export const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n","import { Formik, Field } from 'formik';\nimport * as Yup from 'yup';\nimport { Form, ErrorMessage, FormField, Button } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { toast } from 'react-hot-toast';\n\nconst phoneRegExp =\n  /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/;\nconst ContactSchema = Yup.object().shape({\n  name: Yup.string()\n    .max(30, 'The max number of characters is 30!')\n    .required('Enter a name'),\n  number: Yup.string()\n    .matches(phoneRegExp, 'Phone number is not valid')\n    .required('Enter a phone number'),\n});\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const onSubmit = (valuesFormik, actionsFormik) => {\n    if (contacts.find(({ name }) => name === valuesFormik.name)) {\n      return toast.error(`${valuesFormik.name} is already in contacts`);\n    }\n    dispatch(addContact(valuesFormik));\n    actionsFormik.resetForm({ valuesFormik: { name: '', number: '' } });\n  };\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={ContactSchema}\n      onSubmit={(values, actions) => {\n        onSubmit(values, actions);\n      }}\n    >\n      <Form>\n        <FormField>\n          Name\n          <Field name=\"name\" />\n          <ErrorMessage name=\"name\" component=\"p\" />\n        </FormField>\n        <FormField>\n          Number\n          <Field name=\"number\" />\n          <ErrorMessage name=\"number\" component=\"p\" />\n        </FormField>\n        <Button type=\"submit\">Add contact</Button>\n      </Form>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  margin-top: 20px;\n`;\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\nexport const Button = styled.button`\ncursor: pointer;\ndisplay: flex;\ngap: 5px;\njustify-content: center;\nalign-items: center;\n` ","import { RiDeleteBin5Line } from 'react-icons/ri';\nimport { List, Item, Button } from './ContactList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectFilter,\n  selectError,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\n\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const filter = useSelector(selectFilter);\n\n  const dispatch = useDispatch();\n  const filteredContacts = contacts.filter(({ name }) =>\n    name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <>\n      {filteredContacts.length === 0 && !error && !isLoading ? (\n        <b>No contacts</b>\n      ) : null}\n      <List>\n        {filteredContacts.map(({ name, number, id }) => (\n          <Item key={id}>\n            {name}: {number}\n            <Button\n              type=\"button\"\n              aria-label=\"Delete\"\n              onClick={() => dispatch(deleteContact(id))}\n            >\n              Delete <RiDeleteBin5Line />\n            </Button>\n          </Item>\n        ))}\n      </List>\n    </>\n  );\n};\n\n// export const ContactList = ({ contacts, onDelete }) => (\n//   <List>\n//     {contacts.map(({ name, number, id }) => (\n//       <Item key={id}>\n//         {name}: {number}\n//         <Button type=\"button\" aria-label=\"Delete\" onClick={() => onDelete(id)}>\n//           Delete <RiDeleteBin5Line />\n//         </Button>\n//       </Item>\n//     ))}\n//   </List>\n// );\n// ContactList.propTypes = {\n//   onDelete: PropTypes.func.isRequired,\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.string.isRequired,\n//     }).isRequired\n//   ),\n// };\n","import styled from 'styled-components';\n\nexport const InputLabel = styled.label`\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { InputLabel } from './Filter.styled';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { setFilter } from 'redux/contacts/filterSlice';\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  return (\n    <InputLabel>\n      Find contacts by name\n      <input\n        type=\"text\"\n        onChange={e => dispatch(setFilter(e.target.value))}\n        value={filter}\n      ></input>\n    </InputLabel>\n  );\n};\n\n// Filter.propTypes = {\n//   onChange: PropTypes.func.isRequired,\n//   value: PropTypes.string.isRequired,\n// };\n\n// onChange={onChange} value={value}\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <>\n      <div>Contacts page</div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {isLoading && !error && <b>Request in progress...</b>}\n      {error && <b>{error}</b>}\n      <ContactList />\n    </>\n  );\n};\n\nexport default Contacts;\n\n// import { Toaster } from 'react-hot-toast';\n// import { ContactForm } from './ContactForm/ContactForm';\n// import { ContactList } from './ContactList/ContactList';\n// import { Filter } from './Filter/Filter';\n// import { Layout } from './Layout/Layout';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { selectError, selectIsLoading } from 'redux/contacts/selectors';\n// import { useEffect } from 'react';\n// import { fetchContacts } from 'redux/contacts/operations';\n\n// export const App = () => {\n// const dispatch = useDispatch();\n// const isLoading = useSelector(selectIsLoading);\n// const error = useSelector(selectError);\n\n// useEffect(() => {\n//   dispatch(fetchContacts());\n// }, [dispatch]);\n\n//   return (\n//     <Layout>\n//       <h1>Phonebook</h1>\n//       <ContactForm />\n//       <h2>Contacts</h2>\n//       <Filter />\n//       {isLoading && !error && <b>Request in progress...</b>}\n//       {error && <b>{error}</b>}\n//       <ContactList />\n//       <Toaster />\n//     </Layout>\n//   );\n// };\n"],"names":["Form","styled","FormikForm","ErrorMessage","FormikErrorMessage","p","theme","colors","error","FormField","Button","selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","selectError","ContactSchema","Yup","shape","name","max","required","number","matches","ContactForm","dispatch","useDispatch","useSelector","initialValues","validationSchema","onSubmit","values","actions","valuesFormik","actionsFormik","find","toast","addContact","resetForm","component","type","List","Item","ContactList","filteredContacts","toLowerCase","includes","length","map","id","onClick","deleteContact","InputLabel","Filter","onChange","e","setFilter","target","value","useEffect","fetchContacts"],"sourceRoot":""}